<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>name</key>
    <string>TypeScript</string>
    <key>scopeName</key>
    <string>source.ts</string>
    <key>fileTypes</key>
    <array>
      <string>ts</string>
    </array>
    <key>uuid</key>
    <string>ef98eb90-bf9b-11e4-bb52-0800200c9a66</string>
    <key>patterns</key>
    <array>
      <dict>
        <key>include</key>
        <string>#directives</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#statements</string>
      </dict>
      <dict>
        <key>include</key>
        <string>#shebang</string>
      </dict>
    </array>
    <key>repository</key>
    <dict>
      <key>shebang</key>
      <dict>
        <key>name</key>
        <string>comment.line.shebang.ts</string>
        <key>match</key>
        <string>\A(#!).*(?=$)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.ts</string>
          </dict>
        </dict>
      </dict>
      <key>statements</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#control-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#after-operator-block-as-object-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decl-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#label</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#decorator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#var-expr</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#interface-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#enum-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#namespace-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-alias-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-equals-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#export-declaration</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(declare|export)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
        </array>
      </dict>
      <key>control-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#switch-statement</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#for-loop</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.trycatch.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(catch|finally|throw|try)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(break|continue|goto)\s+([_$[:alpha:]][_$[:alnum:]]*)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.loop.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.label.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(break|continue|do|goto|while)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(return)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flow.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;}]|$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.switch.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(case|default|switch)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#if-statement</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.conditional.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(else|if)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.with.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(with)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(package)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.other.debugger.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(debugger)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
        </array>
      </dict>
      <key>label</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(:)(?=\s*\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.label.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.label.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#decl-block</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.label.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.label.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>expression</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressionWithoutIdentifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#identifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressionPunctuations</string>
          </dict>
        </array>
      </dict>
      <key>expressionWithoutIdentifiers</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#arrow-function</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#paren-expression-possibly-arrow</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#cast</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#ternary-expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#new-expr</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#instanceof-expr</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-call</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#support-objects</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#paren-expression</string>
          </dict>
        </array>
      </dict>
      <key>expressionPunctuations</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-accessor</string>
          </dict>
        </array>
      </dict>
      <key>decorator</key>
      <dict>
        <key>name</key>
        <string>meta.decorator.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))\@</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.decorator.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\s)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>var-expr</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.var.expr.ts</string>
            <key>begin</key>
            <string>(?=(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))</string>
            <key>end</key>
            <string>(?!(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))((?=;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+)|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|((?&lt;!^let|[^\._$[:alnum:]]let|^var|[^\._$[:alnum:]]var)(?=\s*$)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(var|let)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.export.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.ts</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\S)</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#destructuring-variable</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#var-single-variable</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variable-initializer</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(,)\s*((?!\S)|(?=\/\/))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.comma.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;!,)(((?==|;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+)|^\s*$))|((?&lt;=\S)(?=\s*$)))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#single-line-comment-consuming-line-ending</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comment</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#destructuring-variable</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#var-single-variable</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#punctuation-comma</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.var.expr.ts</string>
            <key>begin</key>
            <string>(?=(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?!(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))((?=;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+)|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|((?&lt;!^const|[^\._$[:alnum:]]const)(?=\s*$)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(const(?!\s+enum\b))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.export.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.ts</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>storage.type.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=\S)</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#destructuring-const</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#var-single-const</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#variable-initializer</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(,)\s*((?!\S)|(?=\/\/))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.comma.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;!,)(((?==|;|}|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+)|^\s*$))|((?&lt;=\S)(?=\s*$)))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#single-line-comment-consuming-line-ending</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comment</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#destructuring-const</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#var-single-const</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#punctuation-comma</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>var-single-variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.var-single-variable.expr.ts</string>
            <key>begin</key>
            <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(\!)?(?=\s*
# function assignment |
(=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)) |
# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;
(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |
(:\s*(=&gt;|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.variable.ts entity.name.function.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.definiteassignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-single-variable-type-annotation</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.var-single-variable.expr.ts</string>
            <key>begin</key>
            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])(\!)?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.variable.ts variable.other.constant.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.definiteassignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-single-variable-type-annotation</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.var-single-variable.expr.ts</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)(\!)?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.variable.ts variable.other.readwrite.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.definiteassignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-single-variable-type-annotation</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>var-single-const</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.var-single-variable.expr.ts</string>
            <key>begin</key>
            <string>(?x)([_$[:alpha:]][_$[:alnum:]]*)(?=\s*
# function assignment |
(=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)) |
# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;
(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |
(:\s*(=&gt;|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.variable.ts variable.other.constant.ts entity.name.function.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-single-variable-type-annotation</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.var-single-variable.expr.ts</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.variable.ts variable.other.constant.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-single-variable-type-annotation</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>var-single-variable-type-annotation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
        </array>
      </dict>
      <key>destructuring-variable</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.object-binding-pattern-variable.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\{)</string>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#object-binding-pattern</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-annotation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.array-binding-pattern-variable.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\[)</string>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#array-binding-pattern</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-annotation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>destructuring-const</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.object-binding-pattern-variable.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\{)</string>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#object-binding-pattern-const</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-annotation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.array-binding-pattern-variable.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:|^of|[^\._$[:alnum:]]of|^in|[^\._$[:alnum:]]in)\s*(?=\[)</string>
            <key>end</key>
            <string>(?=$|^|[;,=}]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#array-binding-pattern-const</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-annotation</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>object-binding-element</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)(?=((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
            <key>end</key>
            <string>(?=,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#object-binding-element-propertyName</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#binding-element</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-variable-rest</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>object-binding-element-const</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)(?=((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
            <key>end</key>
            <string>(?=,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#object-binding-element-propertyName</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#binding-element-const</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-binding-pattern-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-variable-rest-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>object-binding-element-propertyName</key>
      <dict>
        <key>begin</key>
        <string>(?x)(?=((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
        <key>end</key>
        <string>(:)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.destructuring.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.object.property.ts</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
        </array>
      </dict>
      <key>binding-element</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-variable-rest</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>binding-element-const</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-binding-pattern-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-binding-pattern-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-variable-rest-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>destructuring-variable-rest</key>
      <dict>
        <key>match</key>
        <string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>meta.definition.variable.ts variable.other.readwrite.ts</string>
          </dict>
        </dict>
      </dict>
      <key>destructuring-variable-rest-const</key>
      <dict>
        <key>match</key>
        <string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>meta.definition.variable.ts variable.other.constant.ts</string>
          </dict>
        </dict>
      </dict>
      <key>object-binding-pattern</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-binding-element</string>
          </dict>
        </array>
      </dict>
      <key>object-binding-pattern-const</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-binding-element-const</string>
          </dict>
        </array>
      </dict>
      <key>array-binding-pattern</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#binding-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>array-binding-pattern-const</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#binding-element-const</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>parameter-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|protected|private|readonly)\s+(?=(override|public|protected|private|readonly)\s+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*
# function assignment |
(=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)) |
# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;
(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |
(:\s*(=&gt;|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>destructuring-parameter</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.parameter.object-binding-pattern.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:)\s*(?:(\.\.\.)\s*)?(\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.object.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parameter-object-binding-element</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.paramter.array-binding-pattern.ts</string>
            <key>begin</key>
            <string>(?&lt;!=|:)\s*(?:(\.\.\.)\s*)?(\[)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\]</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.binding-pattern.array.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#parameter-binding-element</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>parameter-object-binding-element</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)(?=((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(:))</string>
            <key>end</key>
            <string>(?=,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#object-binding-element-propertyName</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#parameter-binding-element</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-object-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-parameter-rest</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>parameter-binding-element</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-object-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-array-binding-pattern</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-parameter-rest</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
        </array>
      </dict>
      <key>destructuring-parameter-rest</key>
      <dict>
        <key>match</key>
        <string>(?:(\.\.\.)\s*)?([_$[:alpha:]][_$[:alnum:]]*)</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.ts</string>
          </dict>
        </dict>
      </dict>
      <key>parameter-object-binding-pattern</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.object.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parameter-object-binding-element</string>
          </dict>
        </array>
      </dict>
      <key>parameter-array-binding-pattern</key>
      <dict>
        <key>begin</key>
        <string>(?:(\.\.\.)\s*)?(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.binding-pattern.array.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#parameter-binding-element</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>field-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.field.declaration.ts</string>
        <key>begin</key>
        <string>(?x)(?&lt;!\()(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(readonly)\s+)?(?=\s*((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|(\#?[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(?:(?:(\?)|(\!))\s*)?(=|:|;|,|\}|$))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?x)(?=\}|;|,|$|(^(?!\s*((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|(\#?[_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(?:(?:(\?)|(\!))\s*)?(=|:|;|,|$))))|(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(\#?[_$[:alpha:]][_$[:alnum:]]*)(?:(\?)|(\!))?(?=\s*\s*
# function assignment |
(=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)) |
# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;
(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |
(:\s*(=&gt;|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.definition.property.ts entity.name.function.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.definiteassignment.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.property.ts variable.object.property.ts</string>
            <key>match</key>
            <string>\#?[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.optional.ts</string>
            <key>match</key>
            <string>\?</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.definiteassignment.ts</string>
            <key>match</key>
            <string>\!</string>
          </dict>
        </array>
      </dict>
      <key>variable-initializer</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;!=|!)(=)(?!=)(?=\s*\S)(?!\s*.*=&gt;\s*$)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|^|[,);}\]]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;!=|!)(=)(?!=)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[,);}\]]|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(of|in)\s+))|(?=^\s*$)|(?&lt;=\S)(?&lt;!=)(?=\s*$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.function.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.ts</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.generator.asterisk.ts</string>
          </dict>
          <key>6</key>
          <dict>
            <key>name</key>
            <string>meta.definition.function.ts entity.name.function.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))|(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-body</string>
          </dict>
        </array>
      </dict>
      <key>function-expression</key>
      <dict>
        <key>name</key>
        <string>meta.function.expression.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.function.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.generator.asterisk.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>meta.definition.function.ts entity.name.function.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=;)|(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#single-line-comment-consuming-line-ending</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-body</string>
          </dict>
        </array>
      </dict>
      <key>function-name</key>
      <dict>
        <key>name</key>
        <string>meta.definition.function.ts entity.name.function.ts</string>
        <key>match</key>
        <string>[_$[:alpha:]][_$[:alnum:]]*</string>
      </dict>
      <key>function-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#return-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-function-return-type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decl-block</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.generator.asterisk.ts</string>
            <key>match</key>
            <string>\*</string>
          </dict>
        </array>
      </dict>
      <key>method-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.method.declaration.ts</string>
            <key>begin</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?\s*\b(constructor)\b(?!:)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>storage.type.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|,|$)|(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#method-declaration-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.method.declaration.ts</string>
            <key>begin</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:(?:\s*\b(new)\b(?!:)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|(?:(\*)\s*)?)(?=\s*((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?[\(])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.new.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.generator.asterisk.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|,|$)|(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#method-declaration-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.method.declaration.ts</string>
            <key>begin</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(override)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(abstract)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?[\(])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>storage.type.property.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.generator.asterisk.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|,|$)|(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#method-declaration-name</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-body</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>object-literal-method-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.method.declaration.ts</string>
        <key>begin</key>
        <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?[\(])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.async.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.property.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.generator.asterisk.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\}|;|,)|(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#method-declaration-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#function-body</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?:(\*)\s*)?(?=\s*(((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??))\s*((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?[\(])</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.property.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.generator.asterisk.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\(|\&lt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#method-declaration-name</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>method-declaration-name</key>
      <dict>
        <key>begin</key>
        <string>(?x)(?=((\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$))|([_$[:alpha:]][_$[:alnum:]]*)|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\]))\s*(\??)\s*[\(\&lt;])</string>
        <key>end</key>
        <string>(?=\(|\&lt;)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.definition.method.ts entity.name.function.ts</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.optional.ts</string>
            <key>match</key>
            <string>\?</string>
          </dict>
        </array>
      </dict>
      <key>arrow-function</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.arrow.ts</string>
            <key>match</key>
            <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(\basync)\s+)?([_$[:alpha:]][_$[:alnum:]]*)\s*(?==&gt;)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.arrow.ts</string>
            <key>begin</key>
            <string>(?x) (?:
  (?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(\basync)
)? ((?&lt;![})!\]])\s*
  (?=
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  )
)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?==&gt;|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameters</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#arrow-return-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#possibly-arrow-return-type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.arrow.ts</string>
            <key>begin</key>
            <string>=&gt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.arrow.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>((?&lt;=\}|\S)(?&lt;!=&gt;)|((?!\{)(?=\S)))(?!\/[\/\*])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#single-line-comment-consuming-line-ending</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#decl-block</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>indexer-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.indexer.declaration.ts</string>
        <key>begin</key>
        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(readonly)\s*)?\s*(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s*(?=:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>variable.parameter.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\])\s*(\?\s*)?|$</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.optional.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
        </array>
      </dict>
      <key>indexer-mapped-type-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.indexer.mappedtype.declaration.ts</string>
        <key>begin</key>
        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))([+-])?(readonly)\s*)?\s*(\[)\s*([_$[:alpha:]][_$[:alnum:]]*)\s+(in)\s+</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.modifier.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.ts</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.in.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\])([+-])?\s*(\?\s*)?|$</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.optional.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>function-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.parameters.ts</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.parameters.end.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#function-parameters-body</string>
          </dict>
        </array>
      </dict>
      <key>function-parameters-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decorator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-parameter</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-name</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#parameter-type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameter.ts</string>
            <key>match</key>
            <string>,</string>
          </dict>
        </array>
      </dict>
      <key>class-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.class.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(?:(abstract)\s+)?\b(class)\b(?=\s+|/[/*])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>storage.type.class.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#class-declaration-or-expression-patterns</string>
          </dict>
        </array>
      </dict>
      <key>class-expression</key>
      <dict>
        <key>name</key>
        <string>meta.class.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(abstract)\s+)?(class)\b(?=\s+|[&lt;{]|\/[\/*])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.type.class.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#class-declaration-or-expression-patterns</string>
          </dict>
        </array>
      </dict>
      <key>class-declaration-or-expression-patterns</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-interface-heritage</string>
          </dict>
          <dict>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.class.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-interface-body</string>
          </dict>
        </array>
      </dict>
      <key>interface-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.interface.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(?:(abstract)\s+)?\b(interface)\b(?=\s+|/[/*])</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>storage.type.interface.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-interface-heritage</string>
          </dict>
          <dict>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.interface.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-interface-body</string>
          </dict>
        </array>
      </dict>
      <key>class-or-interface-heritage</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:\b(extends|implements)\b)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\{)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#class-or-interface-heritage</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressionWithoutIdentifiers</string>
          </dict>
          <dict>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))(?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s*\??\.\s*[_$[:alpha:]][_$[:alnum:]]*)*\s*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.other.inherited-class.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressionPunctuations</string>
          </dict>
        </array>
      </dict>
      <key>class-or-interface-body</key>
      <dict>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decorator</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;=:)\s*</string>
            <key>end</key>
            <string>(?=\s|[;),}\]:\-\+]|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#indexer-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#field-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#access-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#property-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#async-modifier</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#after-operator-block-as-object-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decl-block</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
        </array>
      </dict>
      <key>access-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(abstract|declare|override|public|protected|private|readonly|static)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>property-accessor</key>
      <dict>
        <key>name</key>
        <string>storage.type.property.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(get|set)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>async-modifier</key>
      <dict>
        <key>name</key>
        <string>storage.modifier.async.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(async)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>enum-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.enum.declaration.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?(?:\b(const)\s+)?\b(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>storage.type.enum.ts</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.enum.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\}</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.enummember.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=,|\}|$)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#comment</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#variable-initializer</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?=((\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)|(\[([^\[\]]|\[[^\[\]]*\])+\])))</string>
                <key>end</key>
                <string>(?=,|\}|$)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#string</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#array-literal</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#comment</string>
                  </dict>
                  <dict>
                    <key>include</key>
                    <string>#variable-initializer</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-comma</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>namespace-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.namespace.declaration.ts</string>
        <key>begin</key>
        <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(namespace|module)\s+(?=[_$[:alpha:]"'`]))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.type.namespace.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\})|(?=;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.module.ts</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-accessor</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decl-block</string>
          </dict>
        </array>
      </dict>
      <key>type-alias-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.type.declaration.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>storage.type.type.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>entity.name.type.alias.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(=)\s*(intrinsic)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.intrinsic.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(=)\s*</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>import-equals-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.import-equals.external.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type))?\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(require)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.alias.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>keyword.control.require.ts</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.import-equals.internal.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type))?\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(?!require\b)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.alias.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=;|$|^)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#single-line-comment-consuming-line-ending</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>match</key>
                <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.type.module.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.accessor.ts</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.accessor.optional.ts</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.ts</string>
                <key>match</key>
                <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>import-declaration</key>
      <dict>
        <key>name</key>
        <string>meta.import.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(\bexport)\s+)?(?:(\bdeclare)\s+)?\b(import)(?:\s+(type)(?!\s+from))?(?!\s*[:\(])(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.control.export.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>keyword.control.import.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>keyword.control.type.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;!^import|[^\._$[:alnum:]]import)(?=;|$|^)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#single-line-comment-consuming-line-ending</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;=^import|[^\._$[:alnum:]]import)(?!\s*["'])</string>
            <key>end</key>
            <string>\bfrom\b</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.control.from.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#import-export-declaration</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-export-declaration</string>
          </dict>
        </array>
      </dict>
      <key>export-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(export)\s+(as)\s+(namespace)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>storage.type.namespace.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.export.default.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(export)(?:\s+(type))?(?:(?:\s*(=))|(?:\s+(default)(?=\s+)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.control.default.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#interface-declaration</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.export.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(export)(?:\s+(type))?\b(?!(\$)|(\s*:))((?=\s*[\{*])|((?=\s*[_$[:alpha:]][_$[:alnum:]]*(\s|,))(?!\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b)))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.export.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#import-export-declaration</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>import-export-declaration</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-export-block</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.from.ts</string>
            <key>match</key>
            <string>\bfrom\b</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#import-export-clause</string>
          </dict>
        </array>
      </dict>
      <key>import-export-block</key>
      <dict>
        <key>name</key>
        <string>meta.block.ts</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#import-export-clause</string>
          </dict>
        </array>
      </dict>
      <key>import-export-clause</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(?:(\btype)\s+)?(?:(\bdefault)|(\*)|(\b[_$[:alpha:]][_$[:alnum:]]*)))\s+(as)\s+(?:(default(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|([_$[:alpha:]][_$[:alnum:]]*))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.default.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.language.import-export-all.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>keyword.control.default.ts</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.alias.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.import-export-all.ts</string>
            <key>match</key>
            <string>\*</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.default.ts</string>
            <key>match</key>
            <string>\b(default)\b</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?:(\btype)\s+)?([_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.type.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.alias.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>switch-statement</key>
      <dict>
        <key>name</key>
        <string>switch-statement.expr.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?=\bswitch\s*\()</string>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>name</key>
            <string>switch-expression.expr.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(switch)\s*(\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.switch.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>switch-block.expr.ts</string>
            <key>begin</key>
            <string>\{</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>case-clause.expr.ts</string>
                <key>begin</key>
                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(case|default(?=:))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.switch.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?=:)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(:)\s*(\{)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>case-clause.expr.ts punctuation.definition.section.case-statement.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>meta.block.ts punctuation.definition.block.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>\}</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.block.ts punctuation.definition.block.ts</string>
                  </dict>
                </dict>
                <key>contentName</key>
                <string>meta.block.ts</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#statements</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>match</key>
                <string>(:)</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>case-clause.expr.ts punctuation.definition.section.case-statement.ts</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#statements</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>for-loop</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))for(?=((\s+|(\s*\/\*([^\*]|(\*[^\/]))*\*\/\s*))await)?\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)?(\())</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.control.loop.ts</string>
            <key>match</key>
            <string>await</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#var-expr</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#punctuation-semicolon</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>if-statement</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?=\bif\s*(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))\s*(?!\{))</string>
            <key>end</key>
            <string>(?=;|$|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(if)\s*(\()</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.control.conditional.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>\)</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>name</key>
                <string>string.regexp.ts</string>
                <key>begin</key>
                <string>(?&lt;=\))\s*\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)*\])+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.begin.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(/)([dgimsuy]*)</string>
                <key>endCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.string.end.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.other.ts</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#regexp</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#statements</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>decl-block</key>
      <dict>
        <key>name</key>
        <string>meta.block.ts</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#statements</string>
          </dict>
        </array>
      </dict>
      <key>after-operator-block-as-object-literal</key>
      <dict>
        <key>name</key>
        <string>meta.objectliteral.ts</string>
        <key>begin</key>
        <string>(?&lt;!\+\+|--)(?&lt;=[:=(,\[?+!&gt;]|^await|[^\._$[:alnum:]]await|^return|[^\._$[:alnum:]]return|^yield|[^\._$[:alnum:]]yield|^throw|[^\._$[:alnum:]]throw|^in|[^\._$[:alnum:]]in|^of|[^\._$[:alnum:]]of|^typeof|[^\._$[:alnum:]]typeof|&amp;&amp;|\|\||\*)\s*(\{)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-member</string>
          </dict>
        </array>
      </dict>
      <key>object-literal</key>
      <dict>
        <key>name</key>
        <string>meta.objectliteral.ts</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-member</string>
          </dict>
        </array>
      </dict>
      <key>object-member</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-literal-method-declaration</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts meta.object-literal.key.ts</string>
            <key>begin</key>
            <string>(?=\[)</string>
            <key>end</key>
            <string>(?=:)|((?&lt;=[\]])(?=\s*[\(\&lt;]))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#array-literal</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts meta.object-literal.key.ts</string>
            <key>begin</key>
            <string>(?=[\'\"\`])</string>
            <key>end</key>
            <string>(?=:)|((?&lt;=[\'\"\`])(?=((\s*[\(\&lt;,}])|(\s+(as)\s+))))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts meta.object-literal.key.ts</string>
            <key>begin</key>
            <string>(?x)(?=(\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$))|(\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$))|((?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$)))</string>
            <key>end</key>
            <string>(?=:)|(?=\s*([\(\&lt;,}])|(\s+as\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#numeric-literal</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.method.declaration.ts</string>
            <key>begin</key>
            <string>(?&lt;=[\]\'\"\`])(?=\s*[\(\&lt;])</string>
            <key>end</key>
            <string>(?=\}|;|,)|(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>match</key>
            <string>(?![_$[:alpha:]])([[:digit:]]+)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.object-literal.key.ts</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>match</key>
            <string>(?x)(?:([_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:(\s*\/\*([^\*]|(\*[^\/]))*\*\/)*\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.object-literal.key.ts</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>match</key>
            <string>(?:[_$[:alpha:]][_$[:alnum:]]*)\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*:)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.object-literal.key.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>begin</key>
            <string>\.\.\.</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.spread.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?=,|\}|$|\/\/|\/\*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.readwrite.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+(const)(?=\s*([,}]|$))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[;),}\]:?\-\+\&gt;]|\|\||\&amp;\&amp;|\!\=\=|$|^|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>begin</key>
            <string>(?=[_$[:alpha:]][_$[:alnum:]]*\s*=)</string>
            <key>end</key>
            <string>(?=,|\}|$|\/\/|\/\*)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.object.member.ts</string>
            <key>begin</key>
            <string>:</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.object-literal.key.ts punctuation.separator.key-value.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=,|\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?&lt;=:)\s*(async)?(?=\s*(&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)\(\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.async.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;=\))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type-parameters</string>
                  </dict>
                  <dict>
                    <key>begin</key>
                    <string>\(</string>
                    <key>beginCaptures</key>
                    <dict>
                      <key>0</key>
                      <dict>
                        <key>name</key>
                        <string>meta.brace.round.ts</string>
                      </dict>
                    </dict>
                    <key>end</key>
                    <string>\)</string>
                    <key>endCaptures</key>
                    <dict>
                      <key>0</key>
                      <dict>
                        <key>name</key>
                        <string>meta.brace.round.ts</string>
                      </dict>
                    </dict>
                    <key>patterns</key>
                    <array>
                      <dict>
                        <key>include</key>
                        <string>#expression-inside-possibly-arrow-parens</string>
                      </dict>
                    </array>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?&lt;=:)\s*(async)?\s*(\()(?=\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.async.ts</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>\)</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression-inside-possibly-arrow-parens</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?&lt;=:)\s*(async)?\s*(?=\&lt;\s*$)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>storage.modifier.async.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(?&lt;=\&gt;)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type-parameters</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>begin</key>
                <string>(?&lt;=\&gt;)\s*(\()(?=\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))</string>
                <key>beginCaptures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>\)</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>meta.brace.round.ts</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#expression-inside-possibly-arrow-parens</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#possibly-arrow-return-type</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>ternary-expression</key>
      <dict>
        <key>begin</key>
        <string>(?!\?\.\s*[^[:digit:]])(\?)(?!\?)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.ternary.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\s*(:)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.ternary.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>function-call</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\)]))\s*(?:(\?\.\s*)|(\!))?((&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)?\())</string>
            <key>end</key>
            <string>(?&lt;=\))(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\)]))\s*(?:(\?\.\s*)|(\!))?((&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)?\())</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.function-call.ts</string>
                <key>begin</key>
                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))</string>
                <key>end</key>
                <string>(?=\s*(?:(\?\.\s*)|(\!))?((&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)?\())</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#function-call-target</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-call-optionals</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-arguments</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#paren-expression</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?=(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\)]))(&lt;\s*[\{\[\(]\s*$))</string>
            <key>end</key>
            <string>(?&lt;=\&gt;)(?!(((([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))|(?&lt;=[\)]))(&lt;\s*[\{\[\(]\s*$))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>meta.function-call.ts</string>
                <key>begin</key>
                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*)(\s*\??\.\s*(\#?[_$[:alpha:]][_$[:alnum:]]*))*)|(\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*))</string>
                <key>end</key>
                <string>(?=(&lt;\s*[\{\[\(]\s*$))</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#function-call-target</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#function-call-optionals</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-arguments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>function-call-target</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#support-function-call-identifiers</string>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.function.ts</string>
            <key>match</key>
            <string>(\#?[_$[:alpha:]][_$[:alnum:]]*)</string>
          </dict>
        </array>
      </dict>
      <key>function-call-optionals</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.function-call.ts punctuation.accessor.optional.ts</string>
            <key>match</key>
            <string>\?\.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.function-call.ts keyword.operator.definiteassignment.ts</string>
            <key>match</key>
            <string>\!</string>
          </dict>
        </array>
      </dict>
      <key>support-function-call-identifiers</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#support-objects</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#object-identifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-accessor</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.import.ts</string>
            <key>match</key>
            <string>(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))import(?=\s*[\(]\s*[\"\'\`]))</string>
          </dict>
        </array>
      </dict>
      <key>new-expr</key>
      <dict>
        <key>name</key>
        <string>new.expr.ts</string>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(new)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.new.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))|(?=[;),}\]:?\-\+\&gt;]|\|\||\&amp;\&amp;|\!\=\=|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))function((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>instanceof-expr</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(instanceof)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.instanceof.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?&lt;=\))|(?=[;),}\]:?\-\+\&gt;]|\|\||\&amp;\&amp;|\!\=\=|$|(([\&amp;\~\^\|]\s*)?[_$[:alpha:]][_$[:alnum:]]*\s+instanceof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.)))|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))function((\s+[_$[:alpha:]][_$[:alnum:]]*)|(\s*[\(]))))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>paren-expression-possibly-arrow</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;=[(=,])\s*(async)?(?=\s*((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?\(\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#paren-expression-possibly-arrow-with-typeparameters</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;=[(=,]|=&gt;|^return|[^\._$[:alnum:]]return)\s*(async)?(?=\s*((((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*))?\()|(&lt;))\s*$)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.async.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#paren-expression-possibly-arrow-with-typeparameters</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#possibly-arrow-return-type</string>
          </dict>
        </array>
      </dict>
      <key>paren-expression-possibly-arrow-with-typeparameters</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\(</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>meta.brace.round.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#expression-inside-possibly-arrow-parens</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>expression-inside-possibly-arrow-parens</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expressionWithoutIdentifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#decorator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#destructuring-parameter</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|protected|private|readonly)\s+(?=(override|public|protected|private|readonly)\s+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*
# function assignment |
(=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)) |
# typeannotation is fn type: &lt; | () | (... | (param: | (param, | (param? | (param= | (param) =&gt;
(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))) |
(:\s*(=&gt;|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(&lt;[^&lt;&gt;]*&gt;)|[^&lt;&gt;(),=])+=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
)))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(override|public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*(\??)(?=\s*[:,]|$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#variable-initializer</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameter.ts</string>
            <key>match</key>
            <string>,</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#identifiers</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#expressionPunctuations</string>
          </dict>
        </array>
      </dict>
      <key>paren-expression</key>
      <dict>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>cast</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>cast.expr.ts</string>
            <key>match</key>
            <string>\s*(&lt;)\s*(const)\s*(&gt;)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>cast.expr.ts</string>
            <key>begin</key>
            <string>(?:(?&lt;!\+\+|--)(?&lt;=^return|[^\._$[:alnum:]]return|^throw|[^\._$[:alnum:]]throw|^yield|[^\._$[:alnum:]]yield|^await|[^\._$[:alnum:]]await|^default|[^\._$[:alnum:]]default|[=(,:&gt;*?\&amp;\|\^]|[^_$[:alnum:]](?:\+\+|\-\-)|[^\+]\+|[^\-]\-))\s*(&lt;)(?!&lt;?\=)(?!\s*$)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>cast.expr.ts</string>
            <key>begin</key>
            <string>(?:(?&lt;=^))\s*(&lt;)(?=[_$[:alpha:]][_$[:alnum:]]*\s*&gt;)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.brace.angle.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>expression-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.flow.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(await)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(yield)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?=\s*\/\*([^\*]|(\*[^\/]))*\*\/\s*\*)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flow.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.generator.asterisk.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(yield)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?:\s*(\*))?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.flow.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.generator.asterisk.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.delete.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))delete(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.in.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))in(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?!\()</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.of.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))of(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))(?!\()</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.instanceof.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))instanceof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.new.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))new(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#typeof-operator</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.void.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))void(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+(const)(?=\s*($|[;,:})\]]))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.as.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=^|[;),}\]:?\-\+\&gt;]|\|\||\&amp;\&amp;|\!\=\=|$|((?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(as)\s+)|(\s+\&lt;))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.spread.ts</string>
            <key>match</key>
            <string>\.\.\.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound.ts</string>
            <key>match</key>
            <string>\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.compound.bitwise.ts</string>
            <key>match</key>
            <string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\|=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.bitwise.shift.ts</string>
            <key>match</key>
            <string>&lt;&lt;|&gt;&gt;&gt;|&gt;&gt;</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.comparison.ts</string>
            <key>match</key>
            <string>===|!==|==|!=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.relational.ts</string>
            <key>match</key>
            <string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[_$[:alnum:]])(\!)\s*(?:(/=)|(?:(/)(?![/*])))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.logical.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.compound.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.arithmetic.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.logical.ts</string>
            <key>match</key>
            <string>\!|&amp;&amp;|\|\||\?\?</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.bitwise.ts</string>
            <key>match</key>
            <string>\&amp;|~|\^|\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.ts</string>
            <key>match</key>
            <string>\=</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.decrement.ts</string>
            <key>match</key>
            <string>--</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.increment.ts</string>
            <key>match</key>
            <string>\+\+</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.arithmetic.ts</string>
            <key>match</key>
            <string>%|\*|/|-|\+</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;=[_$[:alnum:])\]])\s*(?=(\/\*([^\*]|(\*[^\/]))*\*\/\s*)+(?:(/=)|(?:(/)(?![/*]))))</string>
            <key>end</key>
            <string>(?:(/=)|(?:(/)(?!\*([^\*]|(\*[^\/]))*\*\/)))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.compound.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.arithmetic.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;=[_$[:alnum:])\]])\s*(?:(/=)|(?:(/)(?![/*])))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.compound.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.arithmetic.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>typeof-operator</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))typeof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.typeof.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=[,);}\]=&gt;:&amp;|{\?]|$|;|^\s*$|(?:^\s*(?:abstract|async|class|const|declare|enum|export|function|import|interface|let|module|namespace|return|type|var)\b))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
      </dict>
      <key>literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#boolean-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#null-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#undefined-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numericConstant-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#array-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#this-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#super-literal</string>
          </dict>
        </array>
      </dict>
      <key>array-literal</key>
      <dict>
        <key>name</key>
        <string>meta.array.literal.ts</string>
        <key>begin</key>
        <string>\s*(\[)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>numeric-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.numeric.hex.ts</string>
            <key>match</key>
            <string>\b(?&lt;!\$)0(?:x|X)[0-9a-fA-F][0-9a-fA-F_]*(n)?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.binary.ts</string>
            <key>match</key>
            <string>\b(?&lt;!\$)0(?:b|B)[01][01_]*(n)?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.numeric.octal.ts</string>
            <key>match</key>
            <string>\b(?&lt;!\$)0(?:o|O)?[0-7][0-7_]*(n)?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)| # 1.1E+3
  (?:\b[0-9][0-9_]*(\.)[eE][+-]?[0-9][0-9_]*(n)?\b)|             # 1.E+3
  (?:\B(\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|             # .1E+3
  (?:\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*(n)?\b)|                 # 1E+3
  (?:\b[0-9][0-9_]*(\.)[0-9][0-9_]*(n)?\b)|                      # 1.1
  (?:\b[0-9][0-9_]*(\.)(n)?\B)|                                  # 1.
  (?:\B(\.)[0-9][0-9_]*(n)?\b)|                                  # .1
  (?:\b[0-9][0-9_]*(n)?\b(?!\.))                                 # 1
)(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>constant.numeric.decimal.ts</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>7</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>8</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>9</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>10</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>11</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>12</key>
              <dict>
                <key>name</key>
                <string>meta.delimiter.decimal.period.ts</string>
              </dict>
              <key>13</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
              <key>14</key>
              <dict>
                <key>name</key>
                <string>storage.type.numeric.bigint.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>boolean-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.true.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))true(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.boolean.false.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))false(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
        </array>
      </dict>
      <key>null-literal</key>
      <dict>
        <key>name</key>
        <string>constant.language.null.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))null(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>this-literal</key>
      <dict>
        <key>name</key>
        <string>variable.language.this.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))this\b(?!\$)</string>
      </dict>
      <key>super-literal</key>
      <dict>
        <key>name</key>
        <string>variable.language.super.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))super\b(?!\$)</string>
      </dict>
      <key>undefined-literal</key>
      <dict>
        <key>name</key>
        <string>constant.language.undefined.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))undefined(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>numericConstant-literal</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.language.nan.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))NaN(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.language.infinity.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Infinity(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
        </array>
      </dict>
      <key>support-objects</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>variable.language.arguments.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(arguments)\b(?!\$)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.class.builtin.ts</string>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(Array|ArrayBuffer|Atomics|BigInt|BigInt64Array|BigUint64Array|Boolean|DataView|Date|Float32Array
  |Float64Array|Function|Generator|GeneratorFunction|Int8Array|Int16Array|Int32Array|Intl|Map|Number|Object|Proxy
  |Reflect|RegExp|Set|SharedArrayBuffer|SIMD|String|Symbol|TypedArray
  |Uint8Array|Uint16Array|Uint32Array|Uint8ClampedArray|WeakMap|WeakSet)\b(?!\$)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.class.error.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))((Eval|Internal|Range|Reference|Syntax|Type|URI)?Error)\b(?!\$)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.class.promise.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(Promise)\b(?!\$)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>support.function.ts</string>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(clear(Interval|Timeout)|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|
  isFinite|isNaN|parseFloat|parseInt|require|set(Interval|Timeout)|super|unescape|uneval)(?=\s*\()</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(Math)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(?:
  (abs|acos|acosh|asin|asinh|atan|atan2|atanh|cbrt|ceil|clz32|cos|cosh|exp|
  expm1|floor|fround|hypot|imul|log|log10|log1p|log2|max|min|pow|random|
  round|sign|sin|sinh|sqrt|tan|tanh|trunc)
  |
  (E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)))?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.constant.math.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.function.math.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>support.constant.property.math.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(console)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(
  assert|clear|count|debug|dir|error|group|groupCollapsed|groupEnd|info|log
  |profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn))?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.class.console.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.function.console.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(JSON)(?:\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(parse|stringify))?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.constant.json.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.function.json.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(import)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(meta)\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.control.import.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.variable.property.importmeta.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(new)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(target)\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.new.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.variable.property.target.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s* (?:
  (?:(constructor|length|prototype|__proto__)\b(?!\$|\s*(&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?\())
  |
  (?:(EPSILON|MAX_SAFE_INTEGER|MAX_VALUE|MIN_SAFE_INTEGER|MIN_VALUE|NEGATIVE_INFINITY|POSITIVE_INFINITY)\b(?!\$)))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.variable.property.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.constant.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x) (?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.)) \b (?:
  (document|event|navigator|performance|screen|window)
  |
  (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener
  |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule
  |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration
  |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern
  |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent
  |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException
  |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer
  |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry
  |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent
  |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential
  |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync
  |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement
  |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement
  |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement
  |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement
  |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement
  |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement
  |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement
  |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement
  |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement
  |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement
  |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement
  |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase
  |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction
  |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities
  |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess
  |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent
  |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream
  |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent
  |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID
  |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification
  |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential
  |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark
  |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList
  |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent
  |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList
  |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager
  |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource
  |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement
  |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength
  |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio
  |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement
  |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement
  |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement
  |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength
  |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement
  |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio
  |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList
  |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement
  |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement
  |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState
  |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet
  |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable
  |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer
  |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat
  |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES
  |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope
  |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult
  |XSLTProcessor))\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.variable.dom.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.class.dom.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s* (?:
  (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE
  |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR
  |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR
  |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)
  |
  (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName
  |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop
  |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor
  |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption
  |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear
  |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete
  |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset
  |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight
  |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds
  |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize
  |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host
  |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth
  |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext
  |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom
  |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple
  |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName
  |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight
  |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer
  |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling
  |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText
  |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts
  |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove
  |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary
  |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead
  |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile
  |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex))\b(?!\$|\s*(&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?\()</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.constant.dom.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.variable.property.dom.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>support.class.node.ts</string>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream
  |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b(?!\$)</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(process)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))(?:
  (arch|argv|config|connected|env|execArgv|execPath|exitCode|mainModule|pid|platform|release|stderr|stdin|stdout|title|version|versions)
  |
  (abort|chdir|cwd|disconnect|exit|[sg]ete?[gu]id|send|[sg]etgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime)
))?\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.variable.object.process.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.variable.property.process.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>support.function.process.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(exports)|(module)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))(exports|id|filename|loaded|parent|children))?)\b(?!\$)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>support.type.object.module.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>support.type.object.module.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>support.type.object.module.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>support.variable.object.node.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(global|GLOBAL|root|__dirname|__filename)\b(?!\$)</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x) (?:(\.)|(\?\.(?!\s*[[:digit:]]))) \s*
(?:
 (on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|
   Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|
   Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|
   Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|
   Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|
   Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|
   Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|
   Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)
 ) |
 (shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|
   scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|
   sup|sub|substr|substring|splice|split|send|set(?:Milliseconds|Seconds|Minutes|Hours|
   Month|Year|FullYear|Date|UTC(?:Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|
   Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|
   savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|
   contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|
   createEventObject|to(?:GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|
   test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|
   untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|
   print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|
   fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|
   forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|
   abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|
   releaseCapture|releaseEvents|go|get(?:Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|
   Time|Date|TimezoneOffset|UTC(?:Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|
   Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|
   moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back
 ) |
 (acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|
   appendChild|appendData|before|blur|canPlayType|captureStream|
   caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|
   cloneContents|cloneNode|cloneRange|close|closest|collapse|
   compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|
   convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|
   createAttributeNS|createCaption|createCDATASection|createComment|
   createContextualFragment|createDocument|createDocumentFragment|
   createDocumentType|createElement|createElementNS|createEntityReference|
   createEvent|createExpression|createHTMLDocument|createNodeIterator|
   createNSResolver|createProcessingInstruction|createRange|createShadowRoot|
   createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|
   deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|
   deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|
   enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|
   exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|
   getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|
   getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|
   getClientRects|getContext|getDestinationInsertionPoints|getElementById|
   getElementsByClassName|getElementsByName|getElementsByTagName|
   getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|
   getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|
   hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|
   insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|
   insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|
   isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|
   lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|
   moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|
   parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|
   previousSibling|probablySupportsContext|queryCommandEnabled|
   queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|
   querySelector|querySelectorAll|registerContentHandler|registerElement|
   registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|
   removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|
   removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|
   requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|
   scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|
   setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|
   setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|
   setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|
   slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|
   submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|
   toDataURL|toggle|toString|values|write|writeln
 ) |
 (all|catch|finally|race|reject|resolve|then
 )
)(?=\s*\()</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>support.function.event-handler.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>support.function.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>support.function.dom.ts</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>support.function.promise.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>identifiers</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#object-identifiers</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*)?([_$[:alpha:]][_$[:alnum:]]*)(?=\s*=\s*(
  ((async\s+)?(
    (function\s*[(&lt;*]) |
    (function\s+) |
    ([_$[:alpha:]][_$[:alnum:]]*\s*=&gt;)
  )) |
  ((async\s*)?(
    ((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))))) |
    # sure shot arrow functions even if =&gt; is on new line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?
  [(]\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*
  (
    ([)]\s*:) |                                                                                       # ():
    ((\.\.\.\s*)?[_$[:alpha:]][_$[:alnum:]]*\s*:)                                                                  # [(]param: | [(]...param:
  )
) |

# arrow function possible to detect only with =&gt; on same line
(
  (&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?                                                                                 # typeparameters
  \(\s*(\/\*([^\*]|(\*[^\/]))*\*\/\s*)*(([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\.\.\.\s*[_$[:alpha:]]))([^()\'\"\`]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))*)?\)   # parameters
  (\s*:\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+)?                                                                        # return type
  \s*=&gt;                                                                                               # arrow operator
)
  ))
))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.constant.property.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(\#?[_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.property.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.other.constant.ts</string>
            <key>match</key>
            <string>([[:upper:]][_$[:digit:][:upper:]]*)(?![_$[:alnum:]])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>variable.other.readwrite.ts</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>object-identifiers</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>support.class.ts</string>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)(?=\s*\??\.\s*prototype\b(?!\$))</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(?:
  (\#?[[:upper:]][_$[:digit:][:upper:]]*) |
  (\#?[_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.constant.object.property.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.other.object.property.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:
  ([[:upper:]][_$[:digit:][:upper:]]*) |
  ([_$[:alpha:]][_$[:alnum:]]*)
)(?=\s*\??\.\s*\#?[_$[:alpha:]][_$[:alnum:]]*)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.constant.object.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.object.ts</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>type-annotation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.type.annotation.ts</string>
            <key>begin</key>
            <string>(:)(?=\s*\S)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;![:|&amp;])((?=$|^|[,);\}\]]|//)|(?==[^&gt;])|((?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.annotation.ts</string>
            <key>begin</key>
            <string>(:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;![:|&amp;])((?=[,);\}\]]|//)|(?==[^&gt;])|(?=^\s*$)|((?&lt;=\S)(?=\s*$))|((?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>parameter-type-annotation</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.type.annotation.ts</string>
            <key>begin</key>
            <string>(:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=[,)])|(?==[^&gt;])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>return-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.return.type.ts</string>
            <key>begin</key>
            <string>(?&lt;=\))\s*(:)(?=\s*\S)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;![:|&amp;])(?=$|^|[{};,]|//)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#return-type-core</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.return.type.ts</string>
            <key>begin</key>
            <string>(?&lt;=\))\s*(:)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.annotation.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;![:|&amp;])((?=[{};,]|//|^\s*$)|((?&lt;=\S)(?=\s*$)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#return-type-core</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>return-type-core</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;=[:|&amp;])(?=\s*\{)</string>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-object</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-predicate-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>arrow-return-type</key>
      <dict>
        <key>name</key>
        <string>meta.return.type.arrow.ts</string>
        <key>begin</key>
        <string>(?&lt;=\))\s*(:)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.annotation.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?==&gt;|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arrow-return-type-body</string>
          </dict>
        </array>
      </dict>
      <key>possibly-arrow-return-type</key>
      <dict>
        <key>begin</key>
        <string>(?&lt;=\)|^)\s*(:)(?=\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*=&gt;)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?==&gt;|\{|(^\s*(export|function|class|interface|let|var|const|import|enum|namespace|module|type|abstract|declare)\s+))</string>
        <key>contentName</key>
        <string>meta.arrow.ts meta.return.type.arrow.ts</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#arrow-return-type-body</string>
          </dict>
        </array>
      </dict>
      <key>arrow-return-type-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;=[:])(?=\s*\{)</string>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-object</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-predicate-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.type.parameters.ts</string>
        <key>begin</key>
        <string>(&lt;)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(&gt;)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.end.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.modifier.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(extends)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.assignment.ts</string>
            <key>match</key>
            <string>(=)(?!&gt;)</string>
          </dict>
        </array>
      </dict>
      <key>type-arguments</key>
      <dict>
        <key>name</key>
        <string>meta.type.parameters.ts</string>
        <key>begin</key>
        <string>\&lt;</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\&gt;</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.typeparameters.end.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type-arguments-body</string>
          </dict>
        </array>
      </dict>
      <key>type-arguments-body</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(_)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-string</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#numeric-literal</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-primitive</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-builtin-literals</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-tuple</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-object</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-conditional</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-operators</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-fn-type-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-paren-or-function-parameters</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-function-return-type</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(readonly)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))\s*</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-name</string>
          </dict>
        </array>
      </dict>
      <key>type-primitive</key>
      <dict>
        <key>name</key>
        <string>support.type.primitive.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(string|number|bigint|boolean|symbol|any|void|never|unknown)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>type-builtin-literals</key>
      <dict>
        <key>name</key>
        <string>support.type.builtin.ts</string>
        <key>match</key>
        <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(this|true|false|undefined|null|object)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
      </dict>
      <key>type-tuple</key>
      <dict>
        <key>name</key>
        <string>meta.type.tuple.ts</string>
        <key>begin</key>
        <string>\[</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\]</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.square.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.operator.rest.ts</string>
            <key>match</key>
            <string>\.\.\.</string>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))([_$[:alpha:]][_$[:alnum:]]*)\s*(\?)?\s*(:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.label.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.separator.label.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
        </array>
      </dict>
      <key>type-object</key>
      <dict>
        <key>name</key>
        <string>meta.object.type.ts</string>
        <key>begin</key>
        <string>\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.block.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#method-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#indexer-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#indexer-mapped-type-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#field-declaration</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>\.\.\.</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.spread.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\}|;|,|$)|(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-comma</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#punctuation-semicolon</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-conditional</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(extends)\s+</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=:)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>\?</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.ternary.ts</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>:</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.ternary.ts</string>
                  </dict>
                </dict>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#type</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#type</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-paren-or-function-parameters</key>
      <dict>
        <key>name</key>
        <string>meta.type.paren.cover.ts</string>
        <key>begin</key>
        <string>\(</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\)</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>meta.brace.round.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)(?=\s*(:\s*(
  (&lt;) |
  ([(]\s*(
    ([)]) |
    (\.\.\.) |
    ([_$[:alnum:]]+\s*(
      ([:,?=])|
      ([)]\s*=&gt;)
    ))
  ))
)) |
(:\s*(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))Function(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))) |
(:\s*((&lt;\s*$)|((&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;]|\&lt;\s*([_$[:alpha:]]|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\]))([^=&lt;&gt;]|=[^&lt;])*\&gt;)*\&gt;)*&gt;\s*)?[\(]\s*((([\{\[]\s*)?$)|((\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})\s*((:\s*\{?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*)))|((\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])\s*((:\s*\[?$)|((\s*([^&lt;&gt;\(\)\{\}]|\&lt;([^&lt;&gt;]|\&lt;([^&lt;&gt;]|\&lt;[^&lt;&gt;]+\&gt;)+\&gt;)+\&gt;|\([^\(\)]+\)|\{[^\{\}]+\})+\s*)?=\s*))))))))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)(?:(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(public|private|protected|readonly)\s+)?(?:(\.\.\.)\s*)?(?&lt;!=|:)(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s*(\??)(?=:)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.rest.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts variable.language.this.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-annotation</string>
          </dict>
          <dict>
            <key>name</key>
            <string>punctuation.separator.parameter.ts</string>
            <key>match</key>
            <string>,</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-fn-type-parameters</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(abstract)\s+)?(new)\b(?=\s*\&lt;)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.type.constructor.ts storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>meta.type.constructor.ts keyword.control.new.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=&gt;)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#comment</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-parameters</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.constructor.ts</string>
            <key>begin</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(abstract)\s+)?(new)\b\s*(?=\()</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.modifier.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.control.new.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.function.ts</string>
            <key>begin</key>
            <string>(?x)(
  (?=
    [(]\s*(
      ([)]) |
      (\.\.\.) |
      ([_$[:alnum:]]+\s*(
        ([:,?=])|
        ([)]\s*=&gt;)
      ))
    )
  )
)</string>
            <key>end</key>
            <string>(?&lt;=\))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#function-parameters</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-function-return-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.type.function.return.ts</string>
            <key>begin</key>
            <string>(=&gt;)(?=\s*\S)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.arrow.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])(?=[,\]\)\{\}=;&gt;:\?]|//|$)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-function-return-type-core</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.type.function.return.ts</string>
            <key>begin</key>
            <string>=&gt;</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>storage.type.function.arrow.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;!=&gt;)(?&lt;![|&amp;])((?=[,\]\)\{\}=;:\?&gt;]|//|^\s*$)|((?&lt;=\S)(?=\s*$)))</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-function-return-type-core</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>type-function-return-type-core</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#comment</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?&lt;==&gt;)(?=\s*\{)</string>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-object</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#type-predicate-operator</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
      </dict>
      <key>type-operators</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#typeof-operator</string>
          </dict>
          <dict>
            <key>begin</key>
            <string>([&amp;|])(?=\s*\{)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?&lt;=\})</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-object</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>[&amp;|]</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\S)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.keyof.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))keyof(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.ternary.ts</string>
            <key>match</key>
            <string>(\?|\:)</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.infer.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))infer(?=\s+[_$[:alpha:]])</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.import.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))import(?=\s*\()</string>
          </dict>
        </array>
      </dict>
      <key>type-predicate-operator</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(?:(asserts)\s+)?(?!asserts)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))\s(is)(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.asserts.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts variable.language.this.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.expression.is.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))(asserts)\s+(?!is)(?:(this)|([_$[:alpha:]][_$[:alnum:]]*))(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.type.asserts.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts variable.language.this.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.parameter.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.type.asserts.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))asserts(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.expression.is.ts</string>
            <key>match</key>
            <string>(?&lt;![_$[:alnum:]])(?:(?&lt;=\.\.\.)|(?&lt;!\.))is(?![_$[:alnum:]])(?:(?=\.\.\.)|(?!\.))</string>
          </dict>
        </array>
      </dict>
      <key>type-name</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))\s*(&lt;)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.type.parameters.ts punctuation.definition.typeparameters.end.ts</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type.parameters.ts</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-arguments-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(&gt;)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>meta.type.parameters.ts punctuation.definition.typeparameters.end.ts</string>
              </dict>
            </dict>
            <key>contentName</key>
            <string>meta.type.parameters.ts</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-arguments-body</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?:(\.)|(\?\.(?!\s*[[:digit:]])))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.module.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.accessor.optional.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.ts</string>
            <key>match</key>
            <string>[_$[:alpha:]][_$[:alnum:]]*</string>
          </dict>
        </array>
      </dict>
      <key>punctuation-comma</key>
      <dict>
        <key>name</key>
        <string>punctuation.separator.comma.ts</string>
        <key>match</key>
        <string>,</string>
      </dict>
      <key>punctuation-semicolon</key>
      <dict>
        <key>name</key>
        <string>punctuation.terminator.statement.ts</string>
        <key>match</key>
        <string>;</string>
      </dict>
      <key>punctuation-accessor</key>
      <dict>
        <key>match</key>
        <string>(?:(\.)|(\?\.(?!\s*[[:digit:]])))</string>
        <key>captures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>punctuation.accessor.optional.ts</string>
          </dict>
        </dict>
      </dict>
      <key>string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#qstring-single</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#qstring-double</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#template</string>
          </dict>
        </array>
      </dict>
      <key>qstring-double</key>
      <dict>
        <key>name</key>
        <string>string.quoted.double.ts</string>
        <key>begin</key>
        <string>"</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(")|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>qstring-single</key>
      <dict>
        <key>name</key>
        <string>string.quoted.single.ts</string>
        <key>begin</key>
        <string>'</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(\')|((?:[^\\\n])$)</string>
        <key>endCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.string.end.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>invalid.illegal.newline.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#string-character-escape</string>
          </dict>
        </array>
      </dict>
      <key>string-character-escape</key>
      <dict>
        <key>name</key>
        <string>constant.character.escape.ts</string>
        <key>match</key>
        <string>\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|u\{[0-9A-Fa-f]+\}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
      </dict>
      <key>template</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template-call</string>
          </dict>
          <dict>
            <key>name</key>
            <string>string.template.ts</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.tagged-template.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>`</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.end.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#template-substitution-element</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string-character-escape</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>template-call</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.template.ts</string>
            <key>begin</key>
            <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\s*\??\.\s*)*|(\??\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*)(&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)?`)</string>
            <key>end</key>
            <string>(?=`)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>begin</key>
                <string>(?=(([_$[:alpha:]][_$[:alnum:]]*\s*\??\.\s*)*|(\??\.\s*)?)([_$[:alpha:]][_$[:alnum:]]*))</string>
                <key>end</key>
                <string>(?=(&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)?`)</string>
                <key>patterns</key>
                <array>
                  <dict>
                    <key>include</key>
                    <string>#support-function-call-identifiers</string>
                  </dict>
                  <dict>
                    <key>name</key>
                    <string>entity.name.function.tagged-template.ts</string>
                    <key>match</key>
                    <string>([_$[:alpha:]][_$[:alnum:]]*)</string>
                  </dict>
                </array>
              </dict>
              <dict>
                <key>include</key>
                <string>#type-arguments</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.template.ts</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)?\s*(?=(&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))(([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;|\&lt;\s*(((keyof|infer|typeof|readonly)\s+)|(([_$[:alpha:]][_$[:alnum:]]*|(\{([^\{\}]|(\{([^\{\}]|\{[^\{\}]*\})*\}))*\})|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(\[([^\[\]]|(\[([^\[\]]|\[[^\[\]]*\])*\]))*\])|(\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`))(?=\s*([\&lt;\&gt;\,\.\[]|=&gt;|&amp;(?!&amp;)|\|(?!\|)))))([^&lt;&gt;\(]|(\(([^\(\)]|(\(([^\(\)]|\([^\(\)]*\))*\)))*\))|(?&lt;==)\&gt;)*(?&lt;!=)\&gt;))*(?&lt;!=)\&gt;)*(?&lt;!=)&gt;\s*)`)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.tagged-template.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=`)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#type-arguments</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>template-substitution-element</key>
      <dict>
        <key>name</key>
        <string>meta.template.expression.ts</string>
        <key>begin</key>
        <string>\$\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.end.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#expression</string>
          </dict>
        </array>
        <key>contentName</key>
        <string>meta.embedded.line.ts</string>
      </dict>
      <key>type-string</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#qstring-single</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#qstring-double</string>
          </dict>
          <dict>
            <key>include</key>
            <string>#template-type</string>
          </dict>
        </array>
      </dict>
      <key>template-type</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#template-call</string>
          </dict>
          <dict>
            <key>name</key>
            <string>string.template.ts</string>
            <key>begin</key>
            <string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.function.tagged-template.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>`</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.template.end.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#template-type-substitution-element</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string-character-escape</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>template-type-substitution-element</key>
      <dict>
        <key>name</key>
        <string>meta.template.expression.ts</string>
        <key>begin</key>
        <string>\$\{</string>
        <key>beginCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.begin.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>\}</string>
        <key>endCaptures</key>
        <dict>
          <key>0</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.template-expression.end.ts</string>
          </dict>
        </dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>include</key>
            <string>#type</string>
          </dict>
        </array>
        <key>contentName</key>
        <string>meta.embedded.line.ts</string>
      </dict>
      <key>regex</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>string.regexp.ts</string>
            <key>begin</key>
            <string>(?&lt;!\+\+|--|})(?&lt;=[=(:,\[?+!]|^return|[^\._$[:alnum:]]return|^case|[^\._$[:alnum:]]case|=&gt;|&amp;&amp;|\|\||\*\/)\s*(\/)(?![\/*])(?=(?:[^\/\\\[\()]|\\.|\[([^\]\\]|\\.)+\]|\(([^\)\\]|\\.)+\))+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(/)([dgimsuy]*)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>string.regexp.ts</string>
            <key>begin</key>
            <string>((?&lt;![_$[:alnum:])\]]|\+\+|--|}|\*\/)|((?&lt;=^return|[^\._$[:alnum:]]return|^case|[^\._$[:alnum:]]case))\s*)\/(?![\/*])(?=(?:[^\/\\\[]|\\.|\[([^\]\\]|\\.)*\])+\/([dgimsuy]+|(?![\/\*])|(?=\/\*))(?!\s*[a-zA-Z0-9_$]))</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(/)([dgimsuy]*)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.other.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>regexp</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>keyword.control.anchor.regexp</string>
            <key>match</key>
            <string>\\[bB]|\^|\$</string>
          </dict>
          <dict>
            <key>match</key>
            <string>\\[1-9]\d*|\\k&lt;([a-zA-Z_$][\w$]*)&gt;</string>
            <key>captures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>keyword.other.back-reference.regexp</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>variable.other.regexp</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.quantifier.regexp</string>
            <key>match</key>
            <string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
          </dict>
          <dict>
            <key>name</key>
            <string>keyword.operator.or.regexp</string>
            <key>match</key>
            <string>\|</string>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.assertion.regexp</string>
            <key>begin</key>
            <string>(\()((\?=)|(\?!)|(\?&lt;=)|(\?&lt;!))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.assertion.regexp</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.look-ahead.regexp</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.negative-look-ahead.regexp</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.look-behind.regexp</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>meta.assertion.negative-look-behind.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\))</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.group.regexp</string>
            <key>begin</key>
            <string>\((?:(\?:)|(?:\?&lt;([a-zA-Z_$][\w$]*)&gt;))?</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.no-capture.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>variable.other.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.group.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#regexp</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.other.character-class.set.regexp</string>
            <key>begin</key>
            <string>(\[)(\^)?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.negation.regexp</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\])</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.character-class.regexp</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>constant.other.character-class.range.regexp</string>
                <key>match</key>
                <string>(?:.|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\c[A-Z])|(\\.))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.numeric.regexp</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.control.regexp</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.escape.backslash.regexp</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.numeric.regexp</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.control.regexp</string>
                  </dict>
                  <key>6</key>
                  <dict>
                    <key>name</key>
                    <string>constant.character.escape.backslash.regexp</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>include</key>
                <string>#regex-character-class</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>include</key>
            <string>#regex-character-class</string>
          </dict>
        </array>
      </dict>
      <key>regex-character-class</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.other.character-class.regexp</string>
            <key>match</key>
            <string>\\[wWsSdDtrnvf]|\.</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.numeric.regexp</string>
            <key>match</key>
            <string>\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.control.regexp</string>
            <key>match</key>
            <string>\\c[A-Z]</string>
          </dict>
          <dict>
            <key>name</key>
            <string>constant.character.escape.backslash.regexp</string>
            <key>match</key>
            <string>\\.</string>
          </dict>
        </array>
      </dict>
      <key>comment</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>comment.block.documentation.ts</string>
            <key>begin</key>
            <string>/\*\*(?!/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#docblock</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>name</key>
            <string>comment.block.ts</string>
            <key>begin</key>
            <string>(/\*)(?:\s*((@)internal)(?=\s|(\*/)))?</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.internaldeclaration.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.decorator.internaldeclaration.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>\*/</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ts</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.whitespace.comment.leading.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>comment.line.double-slash.ts</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.comment.ts</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>storage.type.internaldeclaration.ts</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>punctuation.decorator.internaldeclaration.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=$)</string>
            <key>contentName</key>
            <string>comment.line.double-slash.ts</string>
          </dict>
        </array>
      </dict>
      <key>single-line-comment-consuming-line-ending</key>
      <dict>
        <key>begin</key>
        <string>(^[ \t]+)?((//)(?:\s*((@)internal)(?=\s|$))?)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.whitespace.comment.leading.ts</string>
          </dict>
          <key>2</key>
          <dict>
            <key>name</key>
            <string>comment.line.double-slash.ts</string>
          </dict>
          <key>3</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.ts</string>
          </dict>
          <key>4</key>
          <dict>
            <key>name</key>
            <string>storage.type.internaldeclaration.ts</string>
          </dict>
          <key>5</key>
          <dict>
            <key>name</key>
            <string>punctuation.decorator.internaldeclaration.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=^)</string>
        <key>contentName</key>
        <string>comment.line.double-slash.ts</string>
      </dict>
      <key>directives</key>
      <dict>
        <key>name</key>
        <string>comment.line.triple-slash.directive.ts</string>
        <key>begin</key>
        <string>^(///)\s*(?=&lt;(reference|amd-dependency|amd-module)(\s+(path|types|no-default-lib|lib|name)\s*=\s*((\'([^\'\\]|\\.)*\')|(\"([^\"\\]|\\.)*\")|(\`([^\`\\]|\\.)*\`)))+\s*/&gt;\s*$)</string>
        <key>beginCaptures</key>
        <dict>
          <key>1</key>
          <dict>
            <key>name</key>
            <string>punctuation.definition.comment.ts</string>
          </dict>
        </dict>
        <key>end</key>
        <string>(?=$)</string>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>meta.tag.ts</string>
            <key>begin</key>
            <string>(&lt;)(reference|amd-dependency|amd-module)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.tag.directive.ts</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>entity.name.tag.directive.ts</string>
              </dict>
            </dict>
            <key>end</key>
            <string>/&gt;</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.tag.directive.ts</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>name</key>
                <string>entity.other.attribute-name.directive.ts</string>
                <key>match</key>
                <string>path|types|no-default-lib|lib|name</string>
              </dict>
              <dict>
                <key>name</key>
                <string>keyword.operator.assignment.ts</string>
                <key>match</key>
                <string>=</string>
              </dict>
              <dict>
                <key>include</key>
                <string>#string</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>docblock</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>match</key>
            <string>(?x)
((@)(?:access|api))
\s+
(private|protected|public)
\b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.language.access-type.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
((@)author)
\s+
(
  [^@\s&lt;&gt;*/]
  (?:[^@&lt;&gt;*/]|\*[^/])*
)
(?:
  \s*
  (&lt;)
  ([^&gt;\s]+)
  (&gt;)
)?</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.angle.begin.jsdoc</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>constant.other.email.link.underline.jsdoc</string>
              </dict>
              <key>6</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.angle.end.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
((@)borrows) \s+
((?:[^@\s*/]|\*[^/])+)    # &lt;that namepath&gt;
\s+ (as) \s+              # as
((?:[^@\s*/]|\*[^/])+)    # &lt;this namepath&gt;</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>keyword.operator.control.jsdoc</string>
              </dict>
              <key>5</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>meta.example.jsdoc</string>
            <key>begin</key>
            <string>((@)example)\s+</string>
            <key>end</key>
            <string>(?=@|\*/)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>^\s\*\s+</string>
              </dict>
              <dict>
                <key>contentName</key>
                <string>constant.other.description.jsdoc</string>
                <key>begin</key>
                <string>\G(&lt;)caption(&gt;)</string>
                <key>beginCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.tag.inline.jsdoc</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>
                  </dict>
                </dict>
                <key>end</key>
                <string>(&lt;/)caption(&gt;)|(?=\*/)</string>
                <key>endCaptures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>entity.name.tag.inline.jsdoc</string>
                  </dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.bracket.angle.begin.jsdoc</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.bracket.angle.end.jsdoc</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>[^\s@*](?:[^*]|\*[^/])*</string>
                <key>captures</key>
                <dict>
                  <key>0</key>
                  <dict>
                    <key>name</key>
                    <string>source.embedded.ts</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x) ((@)kind) \s+ (class|constant|event|external|file|function|member|mixin|module|namespace|typedef) \b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>constant.language.symbol-type.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
((@)see)
\s+
(?:
  # URL
  (
    (?=https?://)
    (?:[^\s*]|\*[^/])+
  )
  |
  # JSDoc namepath
  (
    (?!
      # Avoid matching bare URIs (also acceptable as links)
      https?://
      |
      # Avoid matching {@inline tags}; we match those below
      (?:\[[^\[\]]*\])? # Possible description [preceding]{@tag}
      {@(?:link|linkcode|linkplain|tutorial)\b
    )
    # Matched namepath
    (?:[^@\s*/]|\*[^/])+
  )
)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.link.underline.jsdoc</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
((@)template)
\s+
# One or more valid identifiers
(
  [A-Za-z_$]         # First character: non-numeric word character
  [\w$.\[\]]*        # Rest of identifier
  (?:                # Possible list of additional identifiers
    \s* , \s*
    [A-Za-z_$]
    [\w$.\[\]]*
  )*
)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)((@)template)\s+(?={)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#jsdoctype</string>
              </dict>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
                <key>match</key>
                <string>([A-Za-z_$][\w$.\[\]]*)</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
(
  (@)
  (?:arg|argument|const|constant|member|namespace|param|var)
)
\s+
(
  [A-Za-z_$]
  [\w$.\[\]]*
)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>begin</key>
            <string>((@)typedef)\s+(?={)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#jsdoctype</string>
              </dict>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
                <key>match</key>
                <string>(?:[^@\s*/]|\*[^/])+</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>((@)(?:arg|argument|const|constant|member|namespace|param|prop|property|var))\s+(?={)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#jsdoctype</string>
              </dict>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
                <key>match</key>
                <string>([A-Za-z_$][\w$.\[\]]*)</string>
              </dict>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
                <key>match</key>
                <string>(?x)
(\[)\s*
[\w$]+
(?:
  (?:\[\])?                                        # Foo[ ].bar properties within an array
  \.                                                # Foo.Bar namespaced parameter
  [\w$]+
)*
(?:
  \s*
  (=)                                                # [foo=bar] Default parameter value
  \s*
  (
    # The inner regexes are to stop the match early at */ and to not stop at escaped quotes
    (?&gt;
      "(?:(?:\*(?!/))|(?:\\(?!"))|[^*\\])*?" |                      # [foo="bar"] Double-quoted
      '(?:(?:\*(?!/))|(?:\\(?!'))|[^*\\])*?' |                      # [foo='bar'] Single-quoted
      \[ (?:(?:\*(?!/))|[^*])*? \] |                                # [foo=[1,2]] Array literal
      (?:(?:\*(?!/))|\s(?!\s*\])|\[.*?(?:\]|(?=\*/))|[^*\s\[\]])*   # Everything else
    )*
  )
)?
\s*(?:(\])((?:[^*\s]|\*[^\s/])+)?|(?=\*/))</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.optional-value.begin.bracket.square.jsdoc</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>keyword.operator.assignment.jsdoc</string>
                  </dict>
                  <key>3</key>
                  <dict>
                    <key>name</key>
                    <string>source.embedded.ts</string>
                  </dict>
                  <key>4</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.definition.optional-value.end.bracket.square.jsdoc</string>
                  </dict>
                  <key>5</key>
                  <dict>
                    <key>name</key>
                    <string>invalid.illegal.syntax.jsdoc</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>(?x)
(
  (@)
  (?:define|enum|exception|export|extends|lends|implements|modifies
  |namespace|private|protected|returns?|suppress|this|throws|type
  |yields?)
)
\s+(?={)</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(?=\s|\*/|[^{}\[\]A-Za-z_$])</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#jsdoctype</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>match</key>
            <string>(?x)
(
  (@)
  (?:alias|augments|callback|constructs|emits|event|fires|exports?
  |extends|external|function|func|host|lends|listens|interface|memberof!?
  |method|module|mixes|mixin|name|requires|see|this|typedef|uses)
)
\s+
(
  (?:
    [^{}@\s*] | \*[^/]
  )+
)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>contentName</key>
            <string>variable.other.jsdoc</string>
            <key>begin</key>
            <string>((@)(?:default(?:value)?|license|version))\s+(([''"]))</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
              </dict>
              <key>4</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.begin.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>(\3)|(?=$|\*/)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.string.end.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>match</key>
            <string>((@)(?:default(?:value)?|license|tutorial|variation|version))\s+([^\s*]+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>variable.other.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>storage.type.class.jsdoc</string>
            <key>match</key>
            <string>(?x) (@) (?:abstract|access|alias|api|arg|argument|async|attribute|augments|author|beta|borrows|bubbles |callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright |default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exception |exports?|extends|extension(?:_?for)?|external|externs|file|fileoverview|final|fires|for|func |function|generator|global|hideconstructor|host|ignore|implements|implicitCast|inherit[Dd]oc |inner|instance|interface|internal|kind|lends|license|listens|main|member|memberof!?|method |mixes|mixins?|modifies|module|name|namespace|noalias|nocollapse|nocompile|nosideeffects |override|overview|package|param|polymer(?:Behavior)?|preserve|private|prop|property|protected |public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary |suppress|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation |version|virtual|writeOnce|yields?) \b</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>include</key>
            <string>#inline-tags</string>
          </dict>
          <dict>
            <key>match</key>
            <string>((@)(?:[_$[:alpha:]][_$[:alnum:]]*))(?=\s+)</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.block.tag.jsdoc</string>
              </dict>
            </dict>
          </dict>
        </array>
      </dict>
      <key>brackets</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>begin</key>
            <string>{</string>
            <key>end</key>
            <string>}|(?=\*/)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#brackets</string>
              </dict>
            </array>
          </dict>
          <dict>
            <key>begin</key>
            <string>\[</string>
            <key>end</key>
            <string>\]|(?=\*/)</string>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#brackets</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>inline-tags</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>constant.other.description.jsdoc</string>
            <key>match</key>
            <string>(\[)[^\]]+(\])(?={@(?:link|linkcode|linkplain|tutorial))</string>
            <key>captures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.square.begin.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.square.end.jsdoc</string>
              </dict>
            </dict>
          </dict>
          <dict>
            <key>name</key>
            <string>entity.name.type.instance.jsdoc</string>
            <key>begin</key>
            <string>({)((@)(?:link(?:code|plain)?|tutorial))\s*</string>
            <key>beginCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>storage.type.class.jsdoc</string>
              </dict>
              <key>3</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.inline.tag.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>}|(?=\*/)</string>
            <key>endCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.curly.end.jsdoc</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>match</key>
                <string>\G((?=https?://)(?:[^|}\s*]|\*[/])+)(\|)?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.link.underline.jsdoc</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.pipe.jsdoc</string>
                  </dict>
                </dict>
              </dict>
              <dict>
                <key>match</key>
                <string>\G((?:[^{}@\s|*]|\*[^/])+)(\|)?</string>
                <key>captures</key>
                <dict>
                  <key>1</key>
                  <dict>
                    <key>name</key>
                    <string>variable.other.description.jsdoc</string>
                  </dict>
                  <key>2</key>
                  <dict>
                    <key>name</key>
                    <string>punctuation.separator.pipe.jsdoc</string>
                  </dict>
                </dict>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
      <key>jsdoctype</key>
      <dict>
        <key>patterns</key>
        <array>
          <dict>
            <key>name</key>
            <string>invalid.illegal.type.jsdoc</string>
            <key>match</key>
            <string>\G{(?:[^}*]|\*[^/}])+$</string>
          </dict>
          <dict>
            <key>contentName</key>
            <string>entity.name.type.instance.jsdoc</string>
            <key>begin</key>
            <string>\G({)</string>
            <key>beginCaptures</key>
            <dict>
              <key>0</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.curly.begin.jsdoc</string>
              </dict>
            </dict>
            <key>end</key>
            <string>((}))\s*|(?=\*/)</string>
            <key>endCaptures</key>
            <dict>
              <key>1</key>
              <dict>
                <key>name</key>
                <string>entity.name.type.instance.jsdoc</string>
              </dict>
              <key>2</key>
              <dict>
                <key>name</key>
                <string>punctuation.definition.bracket.curly.end.jsdoc</string>
              </dict>
            </dict>
            <key>patterns</key>
            <array>
              <dict>
                <key>include</key>
                <string>#brackets</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
    </dict>
  </dict>
</plist>